name: CI/CD Pipeline - Spring Boot Docker + PostgreSQL Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: self-hosted

    steps:
      # Checkout your repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up JDK for building Spring Boot application
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Build your Spring Boot application
      - name: Build Spring Boot application
        run: mvn clean package -DskipTests

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Build and push Spring Boot app Docker image
      - name: Build and push Spring Boot Docker image
        run: |
          docker build -t tmachinya/shaz-app:latest .
          docker push tmachinya/shaz-app:latest

      # Build and push PostgreSQL DB Init Docker image
      - name: Build and push DB Init Docker image
        run: |
          docker build -t tmachinya/postgres-db-init:latest -f Dockerfile.db-init .
          docker push tmachinya/postgres-db-init:latest

      - name: Set KUBECONFIG environment variable (Windows)
        shell: cmd
        run: echo KUBECONFIG=C:/Users/user/.kube/config>> %GITHUB_ENV%

      - name: Debug environment variables
        shell: cmd
        run: echo %KUBECONFIG%

      # (Optional) Verify Kubernetes connection
      - name: Verify Kubernetes cluster connection
        run: kubectl cluster-info

      # Apply Kubernetes manifests
      - name: Apply Kubernetes deployments
        run: |
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/springboot-deployment.yaml
          kubectl apply -f k8s/postgres-init-job.yaml
          kubectl wait --for=condition=complete job/postgres-init-job --timeout=180s

      - name: Clean up DB init job
        shell: cmd
        run: kubectl delete job postgres-init-job || exit /b 0

      # Rollout restart Spring Boot to ensure latest image is used
      - name: Restart Spring Boot deployment
        run: kubectl rollout restart deployment/springboot

      # Post-deploy health check
      - name: Post-deploy health check
        shell: cmd
        run: |
          echo Checking application health...
          set RETRIES=10
          :retry
          curl --fail http://localhost:8080 && echo App is healthy! && exit /b 0
          set /a RETRIES-=1
          if %RETRIES% EQU 0 (
            echo Application health check failed!
            exit /b 1
          )
          timeout /t 5
          goto retry

      # (Optional) Stream logs during deploy (nice to see)
      - name: Stream Spring Boot logs
        run: kubectl logs -l app=springboot --tail=100 --follow &
